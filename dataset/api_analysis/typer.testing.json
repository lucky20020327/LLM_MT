[
  {
    "type": "class",
    "name": "typer.testing.CliRunner",
    "signature": "(charset: str = 'utf-8', env: Optional[Mapping[str, Optional[str]]] = None, echo_stdin: bool = False, mix_stderr: bool = True) -> None",
    "docstring": "The CLI runner provides functionality to invoke a Click command line\nscript for unittesting purposes in a isolated environment.  This only\nworks in single-threaded systems without any concurrency as it changes the\nglobal interpreter state.\n\n:param charset: the character set for the input and output data.\n:param env: a dictionary with environment variables for overriding.\n:param echo_stdin: if this is set to `True`, then reading from stdin writes\n                   to stdout.  This is useful for showing examples in\n                   some circumstances.  Note that regular prompts\n                   will automatically echo the input.\n:param mix_stderr: if this is set to `False`, then stdout and stderr are\n                   preserved as independent streams.  This is useful for\n                   Unix-philosophy apps that have predictable stdout and\n                   noisy stderr, such that each may be measured\n                   independently",
    "source_code": "class CliRunner(ClickCliRunner):\n    def invoke(  # type: ignore\n        self,\n        app: Typer,\n        args: Optional[Union[str, Sequence[str]]] = None,\n        input: Optional[Union[bytes, str, IO[Any]]] = None,\n        env: Optional[Mapping[str, str]] = None,\n        catch_exceptions: bool = True,\n        color: bool = False,\n        **extra: Any,\n    ) -> Result:\n        use_cli = _get_command(app)\n        return super().invoke(\n            use_cli,\n            args=args,\n            input=input,\n            env=env,\n            catch_exceptions=catch_exceptions,\n            color=color,\n            **extra,\n        )\n",
    "methods": [
      {
        "name": "typer.testing.CliRunner.invoke",
        "signature": "(self, app: typer.main.Typer, args: Union[str, Sequence[str], NoneType] = None, input: Union[str, bytes, IO[Any], NoneType] = None, env: Optional[Mapping[str, str]] = None, catch_exceptions: bool = True, color: bool = False, **extra: Any) -> click.testing.Result",
        "docstring": "Invokes a command in an isolated environment.  The arguments are\nforwarded directly to the command line script, the `extra` keyword\narguments are passed to the :meth:`~clickpkg.Command.main` function of\nthe command.\n\nThis returns a :class:`Result` object.\n\n:param cli: the command to invoke\n:param args: the arguments to invoke. It may be given as an iterable\n             or a string. When given as string it will be interpreted\n             as a Unix shell command. More details at\n             :func:`shlex.split`.\n:param input: the input data for `sys.stdin`.\n:param env: the environment overrides.\n:param catch_exceptions: Whether to catch any other exceptions than\n                         ``SystemExit``.\n:param extra: the keyword arguments to pass to :meth:`main`.\n:param color: whether the output should contain color codes. The\n              application can still override this explicitly.\n\n.. versionchanged:: 8.0\n    The result object has the ``return_value`` attribute with\n    the value returned from the invoked command.\n\n.. versionchanged:: 4.0\n    Added the ``color`` parameter.\n\n.. versionchanged:: 3.0\n    Added the ``catch_exceptions`` parameter.\n\n.. versionchanged:: 3.0\n    The result object has the ``exc_info`` attribute with the\n    traceback if available.",
        "source_code": "    def invoke(  # type: ignore\n        self,\n        app: Typer,\n        args: Optional[Union[str, Sequence[str]]] = None,\n        input: Optional[Union[bytes, str, IO[Any]]] = None,\n        env: Optional[Mapping[str, str]] = None,\n        catch_exceptions: bool = True,\n        color: bool = False,\n        **extra: Any,\n    ) -> Result:\n        use_cli = _get_command(app)\n        return super().invoke(\n            use_cli,\n            args=args,\n            input=input,\n            env=env,\n            catch_exceptions=catch_exceptions,\n            color=color,\n            **extra,\n        )\n"
      }
    ]
  }
]