[
  {
    "type": "function",
    "name": "typer.main.launch",
    "signature": "(url: str, wait: bool = False, locate: bool = False) -> int",
    "docstring": "This function launches the given URL (or filename) in the default\nviewer application for this file type.  If this is an executable, it\nmight launch the executable in a new session.  The return value is\nthe exit code of the launched application.  Usually, ``0`` indicates\nsuccess.\n\nThis function handles url in different operating systems separately:\n- On macOS (Darwin), it uses the 'open' command.\n- On Linux and BSD, it uses 'xdg-open' if available.\n- On Windows (and other OSes), it uses the standard webbrowser module.\n\nThe function avoids, when possible, using the webbrowser module on Linux and macOS\nto prevent spammy terminal messages from some browsers (e.g., Chrome).\n\nExamples::\n\n    typer.launch(\"https://typer.tiangolo.com/\")\n    typer.launch(\"/my/downloaded/file\", locate=True)\n\n:param url: URL or filename of the thing to launch.\n:param wait: Wait for the program to exit before returning. This\n    only works if the launched program blocks. In particular,\n    ``xdg-open`` on Linux does not block.\n:param locate: if this is set to `True` then instead of launching the\n               application associated with the URL it will attempt to\n               launch a file manager with the file located.  This\n               might have weird effects if the URL does not point to\n               the filesystem.",
    "source_code": "def launch(url: str, wait: bool = False, locate: bool = False) -> int:\n    \"\"\"This function launches the given URL (or filename) in the default\n    viewer application for this file type.  If this is an executable, it\n    might launch the executable in a new session.  The return value is\n    the exit code of the launched application.  Usually, ``0`` indicates\n    success.\n\n    This function handles url in different operating systems separately:\n    - On macOS (Darwin), it uses the 'open' command.\n    - On Linux and BSD, it uses 'xdg-open' if available.\n    - On Windows (and other OSes), it uses the standard webbrowser module.\n\n    The function avoids, when possible, using the webbrowser module on Linux and macOS\n    to prevent spammy terminal messages from some browsers (e.g., Chrome).\n\n    Examples::\n\n        typer.launch(\"https://typer.tiangolo.com/\")\n        typer.launch(\"/my/downloaded/file\", locate=True)\n\n    :param url: URL or filename of the thing to launch.\n    :param wait: Wait for the program to exit before returning. This\n        only works if the launched program blocks. In particular,\n        ``xdg-open`` on Linux does not block.\n    :param locate: if this is set to `True` then instead of launching the\n                   application associated with the URL it will attempt to\n                   launch a file manager with the file located.  This\n                   might have weird effects if the URL does not point to\n                   the filesystem.\n    \"\"\"\n\n    if url.startswith(\"http://\") or url.startswith(\"https://\"):\n        if _is_macos():\n            return subprocess.Popen(\n                [\"open\", url], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT\n            ).wait()\n\n        has_xdg_open = _is_linux_or_bsd() and shutil.which(\"xdg-open\") is not None\n\n        if has_xdg_open:\n            return subprocess.Popen(\n                [\"xdg-open\", url], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT\n            ).wait()\n\n        import webbrowser\n\n        webbrowser.open(url)\n\n        return 0\n\n    else:\n        return click.launch(url)\n",
    "methods": []
  }
]